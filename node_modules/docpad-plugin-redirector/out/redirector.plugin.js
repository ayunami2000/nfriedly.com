// Generated by CoffeeScript 1.6.3
(function() {
  var _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  module.exports = function(BasePlugin) {
    var RedirectorPlugin, _ref;
    return RedirectorPlugin = (function(_super) {
      __extends(RedirectorPlugin, _super);

      function RedirectorPlugin() {
        this.cleanSourceUrl = __bind(this.cleanSourceUrl, this);
        _ref = RedirectorPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      RedirectorPlugin.prototype.name = 'redirector';

      RedirectorPlugin.prototype.config = {
        getRedirectTemplate: function(destination) {
          return "<!DOCTYPE html>\n<html>\n	<head>\n		<title>Redirect</title>\n		<meta http-equiv=\"REFRESH\" content=\"0;url=" + destination + "\">\n	</head>\n	<body>\n		This page has moved. You will be automatically redirected to its new location. If you aren't forwarded to the new page, <a href=\"" + destination + "\">click here</a>.\n	</body>\n</html>";
        },
        status: 301,
        redirects: {}
      };

      RedirectorPlugin.prototype.cleanSourceUrl = function(source) {
        if (source.substr(0, 1) !== "/") {
          source = '/' + source;
        }
        return source;
      };

      RedirectorPlugin.prototype.checkUrls = function(source, destination) {
        if (typeof source !== "string" || typeof destination !== "string") {
          throw "Error in redirector plugin configuration: all sources and destinations must be strings.\nSource: " + source + "\nDestination: " + destination;
        }
      };

      RedirectorPlugin.prototype.serverExtend = function(opts, next) {
        var config, docpad, self, server;
        config = this.config;
        server = opts.server;
        self = this;
        docpad = this.docpad;
        _ = require('lodash');
        _.each(config.redirects, function(destination, source) {
          self.checkUrls(source, destination);
          source = self.cleanSourceUrl(source);
          docpad.log('debug', "Redirector setting up " + source + " -> " + destination);
          return server.get(source, function(req, res) {
            return res.redirect(config.status, destination);
          });
        });
        return next();
      };

      RedirectorPlugin.prototype.writeAfter = function(opts, next) {
        var TaskGroup, config, docpad, docpadConfig, getCleanOutPathFromUrl, pathUtil, safefs, self, tasks;
        self = this;
        config = this.config;
        docpad = this.docpad;
        docpadConfig = docpad.getConfig();
        TaskGroup = require('taskgroup').TaskGroup;
        safefs = require('safefs');
        pathUtil = require('path');
        getCleanOutPathFromUrl = function(url) {
          url = url.replace(/\/+$/, '');
          if (/\.html?$/.test(url)) {
            return pathUtil.join(docpadConfig.outPath, url);
          } else {
            return pathUtil.join(docpadConfig.outPath, url.replace(/\.html$/, '') + '/index.html');
          }
        };
        if (__indexOf.call(docpad.getEnvironments(), 'static') >= 0) {
          docpad.log('debug', 'Writing static clean url files');
          tasks = new TaskGroup().setConfig({
            concurrency: 0
          }).once('complete', function(err) {
            docpad.log('debug', 'Wrote static clean url files');
            return next(err);
          });
          _.each(config.redirects, function(destination, source) {
            var redirectContent, redirectOutPath;
            self.checkUrls(source, destination);
            source = self.cleanSourceUrl(source);
            redirectOutPath = getCleanOutPathFromUrl(source);
            redirectContent = config.getRedirectTemplate(destination);
            return tasks.addTask(function(complete) {
              docpad.log('debug', "Redirector setting up " + redirectOutPath + " -> " + destination);
              return safefs.writeFile(redirectOutPath, redirectContent, complete);
            });
          });
          tasks.run();
        } else {
          next();
        }
        return this;
      };

      return RedirectorPlugin;

    })(BasePlugin);
  };

}).call(this);
